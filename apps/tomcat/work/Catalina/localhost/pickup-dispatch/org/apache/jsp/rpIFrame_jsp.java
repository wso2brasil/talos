/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.55
 * Generated at: 2020-06-02 16:57:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import org.wso2.sample.identity.oauth2.SampleContextEventListener;
import org.wso2.sample.identity.oauth2.OAuth2Constants;

public final class rpIFrame_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.wso2.sample.identity.oauth2.OAuth2Constants");
    _jspx_imports_classes.add("org.wso2.sample.identity.oauth2.SampleContextEventListener");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>OpenID Connect Session Management RP IFrame</title>\n");
      out.write("    <script language=\"JavaScript\" type=\"text/javascript\">\n");
      out.write("        var client_id = '");
      out.print(session.getAttribute(OAuth2Constants.CONSUMER_KEY));
      out.write("';\n");
      out.write("        var session_state = '");
      out.print(session.getAttribute(OAuth2Constants.SESSION_STATE));
      out.write("';\n");
      out.write("        var mes = client_id + \" \" + session_state;\n");
      out.write("        var targetOrigin = '");
      out.print(session.getAttribute(OAuth2Constants.OIDC_SESSION_IFRAME_ENDPOINT));
      out.write("';\n");
      out.write("        var authorizationEndpoint = '");
      out.print(session.getAttribute(OAuth2Constants.OAUTH2_AUTHZ_ENDPOINT));
      out.write("';\n");
      out.write("\n");
      out.write("        function check_session() {\n");
      out.write("            if (client_id !== null && client_id.length !== 0 && client_id !== 'null' && session_state !== null &&\n");
      out.write("                    session_state.length !== 0 && session_state !== 'null') {\n");
      out.write("                var win = document.getElementById(\"opIFrame\").contentWindow;\n");
      out.write("                win.postMessage(mes, targetOrigin);\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        function setTimer() {\n");
      out.write("            check_session();\n");
      out.write("            setInterval(\"check_session()\", 4 * 1000);\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        window.addEventListener(\"message\", receiveMessage, false);\n");
      out.write("\n");
      out.write("        function receiveMessage(e) {\n");
      out.write("\n");
      out.write("            if (targetOrigin.indexOf(e.origin) < 0) {\n");
      out.write("                return;\n");
      out.write("            }\n");
      out.write("\n");
      out.write("            if (e.data === \"changed\") {\n");
      out.write("                console.log(\"[RP] session state has changed. sending passive request\");\n");
      out.write("                if (authorizationEndpoint !== null && authorizationEndpoint.length !== 0 && authorizationEndpoint !==\n");
      out.write("                        'null') {\n");
      out.write("\n");
      out.write("                    var clientId = client_id;\n");
      out.write("                    var scope = '");
      out.print(session.getAttribute(OAuth2Constants.SCOPE));
      out.write("';\n");
      out.write("                    var responseType = '");
      out.print(session.getAttribute(OAuth2Constants.OAUTH2_GRANT_TYPE));
      out.write("';\n");
      out.write("                    var redirectUri = '");
      out.print(session.getAttribute(OAuth2Constants.CALL_BACK_URL));
      out.write("';\n");
      out.write("                    var prompt = 'none';\n");
      out.write("\n");
      out.write("                    window.top.location.href = authorizationEndpoint + '?client_id=' + clientId + \"&scope=\" + scope +\n");
      out.write("                    \"&response_type=\" + responseType + \"&redirect_uri=\" + redirectUri + \"&prompt=\" + prompt;\n");
      out.write("                }\n");
      out.write("            }\n");
      out.write("            else if (e.data === \"unchanged\") {\n");
      out.write("                console.log(\"[RP] session state has not changed\");\n");
      out.write("            }\n");
      out.write("            else {\n");
      out.write("                console.log(\"[RP] error while checking session status\");\n");
      out.write("            }\n");
      out.write("        }\n");
      out.write("\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body onload=\"setTimer()\">\n");
      out.write("<iframe id=\"opIFrame\"\n");
      out.write("        src=\"");
      out.print(
            SampleContextEventListener.getPropertyByKey(OAuth2Constants.OIDC_SESSION_IFRAME_ENDPOINT)
            + "?"
            + "client_id=" + SampleContextEventListener.getPropertyByKey(OAuth2Constants.CONSUMER_KEY)
            + "&redirect_uri="+ SampleContextEventListener.getPropertyByKey(OAuth2Constants.CALL_BACK_URL)
            );
      out.write("\"\n");
      out.write("        frameborder=\"0\" width=\"0\"\n");
      out.write("        height=\"0\"></iframe>\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
